# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def endpoint_endpointuuid_endpointuuid_get(self, endpointuuid, **kwargs):  # noqa: E501
        """Get Endpoint name and status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoint_endpointuuid_endpointuuid_get(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoint_endpointuuid_endpointuuid_get_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_endpointuuid_endpointuuid_get_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoint_endpointuuid_endpointuuid_get_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Get Endpoint name and status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoint_endpointuuid_endpointuuid_get_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_endpointuuid_endpointuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoint_endpointuuid_endpointuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/endpoint/endpointuuid/{endpointuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_endpointuuid_endpointuuid_put(self, endpointuuid, **kwargs):  # noqa: E501
        """Update Endpoint name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoint_endpointuuid_endpointuuid_put(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Endpointupdaterequest endpointupdaterequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoint_endpointuuid_endpointuuid_put_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_endpointuuid_endpointuuid_put_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoint_endpointuuid_endpointuuid_put_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Update Endpoint name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoint_endpointuuid_endpointuuid_put_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Endpointupdaterequest endpointupdaterequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'endpointupdaterequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_endpointuuid_endpointuuid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoint_endpointuuid_endpointuuid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'endpointupdaterequest' in params:
            body_params = params['endpointupdaterequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json''application/xml', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/endpoint/endpointuuid/{endpointuuid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_endpointuuid_assign_topology_tag_post(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_endpointuuid_assign_topology_tag_post(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Assigntopotagrequest assigntopotagrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_endpointuuid_assign_topology_tag_post_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_endpointuuid_assign_topology_tag_post_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoints_endpointuuid_assign_topology_tag_post_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_endpointuuid_assign_topology_tag_post_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Assigntopotagrequest assigntopotagrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'assigntopotagrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_endpointuuid_assign_topology_tag_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoints_endpointuuid_assign_topology_tag_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assigntopotagrequest' in params:
            body_params = params['assigntopotagrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{endpointuuid}/assign_topology_tag/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete_with_http_info(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete_with_http_info(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete`")  # noqa: E501
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoints_topology_tag_uuid_topotaguuid_endpoint_endpointuuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/topology_tag_uuid/{topotaguuid}/endpoint/{endpointuuid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_topology_tag_uuid_topotaguuid_get(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_topotaguuid_get(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_topology_tag_uuid_topotaguuid_get_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_topology_tag_uuid_topotaguuid_get_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def endpoints_topology_tag_uuid_topotaguuid_get_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_topotaguuid_get_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_topology_tag_uuid_topotaguuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `endpoints_topology_tag_uuid_topotaguuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/topology_tag_uuid/{topotaguuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_endpoint_endpointuuid_get(self, endpointuuid, **kwargs):  # noqa: E501
        """Get information about the specified endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_endpoint_endpointuuid_get(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_endpoint_endpointuuid_get_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.inventory_endpoint_endpointuuid_get_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def inventory_endpoint_endpointuuid_get_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Get information about the specified endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_endpoint_endpointuuid_get_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_endpoint_endpointuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `inventory_endpoint_endpointuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/endpoint/{endpointuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_endpoints_customeruuid_customeruuid_get(self, customeruuid, **kwargs):  # noqa: E501
        """Get list of endpoints for a customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_endpoints_customeruuid_customeruuid_get(customeruuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_endpoints_customeruuid_customeruuid_get_with_http_info(customeruuid, **kwargs)  # noqa: E501
        else:
            (data) = self.inventory_endpoints_customeruuid_customeruuid_get_with_http_info(customeruuid, **kwargs)  # noqa: E501
            return data

    def inventory_endpoints_customeruuid_customeruuid_get_with_http_info(self, customeruuid, **kwargs):  # noqa: E501
        """Get list of endpoints for a customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_endpoints_customeruuid_customeruuid_get_with_http_info(customeruuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customeruuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_endpoints_customeruuid_customeruuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customeruuid' is set
        if ('customeruuid' not in params or
                params['customeruuid'] is None):
            raise ValueError("Missing the required parameter `customeruuid` when calling `inventory_endpoints_customeruuid_customeruuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customeruuid' in params:
            path_params['customeruuid'] = params['customeruuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/endpoints/customeruuid/{customeruuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get(self, endpointuuid, startdate, enddate, **kwargs):  # noqa: E501
        """Get statistics for endpoint  # noqa: E501

        Get statistics related to the specified endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get(endpointuuid, startdate, enddate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param str startdate: Start date for statistics query (required)
        :param str enddate: End date for statistics query (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get_with_http_info(self, endpointuuid, startdate, enddate, **kwargs):  # noqa: E501
        """Get statistics for endpoint  # noqa: E501

        Get statistics related to the specified endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param str startdate: Start date for statistics query (required)
        :param str enddate: End date for statistics query (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `inventory_links_stats_endpoint_endpointuuid_startdate_enddate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/links-stats/endpoint/{endpointuuid}/{startdate}/{enddate}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20018]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get(self, endpointuuid, startdate, enddate, **kwargs):  # noqa: E501
        """Get state statistics for endpoint  # noqa: E501

        Get statistics related to the state of the specified endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get(endpointuuid, startdate, enddate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param str startdate: Start date for statistics query (required)
        :param str enddate: End date for statistics query (required)
        :return: list[InlineResponse20020]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, **kwargs)  # noqa: E501
        else:
            (data) = self.inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, **kwargs)  # noqa: E501
            return data

    def inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get_with_http_info(self, endpointuuid, startdate, enddate, **kwargs):  # noqa: E501
        """Get state statistics for endpoint  # noqa: E501

        Get statistics related to the state of the specified endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get_with_http_info(endpointuuid, startdate, enddate, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param str startdate: Start date for statistics query (required)
        :param str enddate: End date for statistics query (required)
        :return: list[InlineResponse20020]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'startdate', 'enddate']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get`")  # noqa: E501
        # verify the required parameter 'startdate' is set
        if ('startdate' not in params or
                params['startdate'] is None):
            raise ValueError("Missing the required parameter `startdate` when calling `inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get`")  # noqa: E501
        # verify the required parameter 'enddate' is set
        if ('enddate' not in params or
                params['enddate'] is None):
            raise ValueError("Missing the required parameter `enddate` when calling `inventory_links_stats_endpointstate_endpointuuid_startdate_enddate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501
        if 'startdate' in params:
            path_params['startdate'] = params['startdate']  # noqa: E501
        if 'enddate' in params:
            path_params['enddate'] = params['enddate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/links-stats/endpointstate/{endpointuuid}/{startdate}/{enddate}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20020]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_regularendpoint_post(self, **kwargs):  # noqa: E501
        """Create Physical (Port) Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_regularendpoint_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Regendpointrequest regendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_regularendpoint_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_regularendpoint_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_regularendpoint_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Physical (Port) Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_regularendpoint_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Regendpointrequest regendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regendpointrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_regularendpoint_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'regendpointrequest' in params:
            body_params = params['regendpointrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/regularendpoint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_regularvport_post(self, **kwargs):  # noqa: E501
        """Create VPort for physical endpoint  # noqa: E501

        Create VPort representing a VLAN on a Physical Ethernet Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_regularvport_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Regvportrequest regvportrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_regularvport_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_regularvport_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_regularvport_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create VPort for physical endpoint  # noqa: E501

        Create VPort representing a VLAN on a Physical Ethernet Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_regularvport_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Regvportrequest regvportrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regvportrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_regularvport_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'regvportrequest' in params:
            body_params = params['regvportrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/regularvport/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_vnfendpoint_post(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_vnfendpoint_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_vnfendpoint_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_vnfendpoint_post_with_http_info(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfendpointrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_vnfendpoint_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vnfendpointrequest' in params:
            body_params = params['vnfendpointrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/vnfendpoint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfendpoint_vnfuuid_vnfuuid_get(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid_vnfuuid_get(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfendpoint_vnfuuid_vnfuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfendpoint_vnfuuid_vnfuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfendpoint/vnfuuid/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
