# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.3
    Contact: pnapi-support@team.telstra.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def eisendpointendpointuuidendpointuuidput(self, endpointuuid, **kwargs):  # noqa: E501
        """Update Endpoint name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointendpointuuidendpointuuidput(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body8 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointendpointuuidendpointuuidput_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointendpointuuidendpointuuidput_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def eisendpointendpointuuidendpointuuidput_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Update Endpoint name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointendpointuuidendpointuuidput_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body8 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointendpointuuidendpointuuidput" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eisendpointendpointuuidendpointuuidput`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoint/endpointuuid/{endpointuuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eisendpointsendpointuuidassigntopologytagpost(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointsendpointuuidassigntopologytagpost(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body9 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def eisendpointsendpointuuidassigntopologytagpost_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body9 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointsendpointuuidassigntopologytagpost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eisendpointsendpointuuidassigntopologytagpost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eisendpointstopologytaguuiddelete(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuiddelete(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
            return data

    def eisendpointstopologytaguuiddelete_with_http_info(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointstopologytaguuiddelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `eisendpointstopologytaguuiddelete`")  # noqa: E501
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eisendpointstopologytaguuiddelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}/endpoint/{endpointuuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eisendpointstopologytaguuidtopotaguuidget(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuidtopotaguuidget(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def eisendpointstopologytaguuidtopotaguuidget_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointstopologytaguuidtopotaguuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `eisendpointstopologytaguuidtopotaguuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryendpointendpointuuidget(self, endpointuuid, **kwargs):  # noqa: E501
        """Get information about the specified endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryendpointendpointuuidget(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: DatacenterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryendpointendpointuuidget_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.inventoryendpointendpointuuidget_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def inventoryendpointendpointuuidget_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Get information about the specified endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryendpointendpointuuidget_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: DatacenterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryendpointendpointuuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `inventoryendpointendpointuuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/endpoint/{endpointuuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatacenterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryendpointscustomeruuidcustomeruuidget(self, customeruuid, **kwargs):  # noqa: E501
        """Get list of endpoints for a customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryendpointscustomeruuidcustomeruuidget(customeruuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: Endpointone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryendpointscustomeruuidcustomeruuidget_with_http_info(customeruuid, **kwargs)  # noqa: E501
        else:
            (data) = self.inventoryendpointscustomeruuidcustomeruuidget_with_http_info(customeruuid, **kwargs)  # noqa: E501
            return data

    def inventoryendpointscustomeruuidcustomeruuidget_with_http_info(self, customeruuid, **kwargs):  # noqa: E501
        """Get list of endpoints for a customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryendpointscustomeruuidcustomeruuidget_with_http_info(customeruuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str customeruuid: Unique identifier representing a specific customer (required)
        :return: Endpointone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customeruuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryendpointscustomeruuidcustomeruuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customeruuid' is set
        if ('customeruuid' not in params or
                params['customeruuid'] is None):
            raise ValueError("Missing the required parameter `customeruuid` when calling `inventoryendpointscustomeruuidcustomeruuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customeruuid' in params:
            path_params['customeruuid'] = params['customeruuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/endpoints/customeruuid/{customeruuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Endpointone',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryregularendpointpost(self, **kwargs):  # noqa: E501
        """Create Physical (Port) Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryregularendpointpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body4 body:
        :return: SuccessFragment2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryregularendpointpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventoryregularendpointpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventoryregularendpointpost_with_http_info(self, **kwargs):  # noqa: E501
        """Create Physical (Port) Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryregularendpointpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body4 body:
        :return: SuccessFragment2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryregularendpointpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/regularendpoint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment2',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryregularvportpost(self, **kwargs):  # noqa: E501
        """Create VPort for physical endpoint  # noqa: E501

        Create VPort representing a VLAN on a Physical Ethernet Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryregularvportpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body5 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryregularvportpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventoryregularvportpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventoryregularvportpost_with_http_info(self, **kwargs):  # noqa: E501
        """Create VPort for physical endpoint  # noqa: E501

        Create VPort representing a VLAN on a Physical Ethernet Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryregularvportpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body5 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryregularvportpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/regularvport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryvnfendpointpost(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfendpointpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body7 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryvnfendpointpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventoryvnfendpointpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventoryvnfendpointpost_with_http_info(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfendpointpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body7 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryvnfendpointpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/vnfendpoint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
