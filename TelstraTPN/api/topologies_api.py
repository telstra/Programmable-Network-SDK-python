# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class TopologiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def endpoints_assign_topology_tag(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_assign_topology_tag(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Assigntopotagrequest assigntopotagrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_assign_topology_tag_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_assign_topology_tag_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoints_assign_topology_tag_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_assign_topology_tag_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Assigntopotagrequest assigntopotagrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['endpointuuid', 'assigntopotagrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_assign_topology_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in local_var_params or
                local_var_params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoints_assign_topology_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in local_var_params:
            path_params['endpointuuid'] = local_var_params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assigntopotagrequest' in local_var_params:
            body_params = local_var_params['assigntopotagrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_topology_tag_uuid(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_topology_tag_uuid_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_topology_tag_uuid_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def endpoints_topology_tag_uuid_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_topology_tag_uuid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `endpoints_topology_tag_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_topology_tag_uuid_endpoint(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_endpoint(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.endpoints_topology_tag_uuid_endpoint_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_topology_tag_uuid_endpoint_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
            return data

    def endpoints_topology_tag_uuid_endpoint_with_http_info(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.endpoints_topology_tag_uuid_endpoint_with_http_info(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid', 'endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_topology_tag_uuid_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `endpoints_topology_tag_uuid_endpoint`")  # noqa: E501
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in local_var_params or
                local_var_params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `endpoints_topology_tag_uuid_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501
        if 'endpointuuid' in local_var_params:
            path_params['endpointuuid'] = local_var_params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}/endpoint/{endpointuuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_get(self, **kwargs):  # noqa: E501
        """List all topology tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def topology_tag_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all topology tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topology]',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_objects(self, topotaguuid, **kwargs):  # noqa: E501
        """List objects for Topology  # noqa: E501

        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_objects(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_objects_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_objects_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def topology_tag_objects_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List objects for Topology  # noqa: E501

        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_objects_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_objects" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `topology_tag_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/objects/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_post(self, **kwargs):  # noqa: E501
        """Create a named topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Topotagcreaterequest topotagcreaterequest:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def topology_tag_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a named topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Topotagcreaterequest topotagcreaterequest:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotagcreaterequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topotagcreaterequest' in local_var_params:
            body_params = local_var_params['topotagcreaterequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_uuid_delete(self, topotaguuid, **kwargs):  # noqa: E501
        """Delete a topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_delete(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_uuid_delete_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_uuid_delete_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def topology_tag_uuid_delete_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Delete a topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_delete_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_uuid_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `topology_tag_uuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_uuid_get(self, topotaguuid, **kwargs):  # noqa: E501
        """Get information about the specified topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_get(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_uuid_get_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_uuid_get_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def topology_tag_uuid_get_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Get information about the specified topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_get_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_uuid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `topology_tag_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def topology_tag_uuid_put(self, topotaguuid, **kwargs):  # noqa: E501
        """Update a topology tag&#39;s name and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_put(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Topotagupdateresponse topotagupdateresponse:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.topology_tag_uuid_put_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.topology_tag_uuid_put_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def topology_tag_uuid_put_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Update a topology tag&#39;s name and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.topology_tag_uuid_put_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Topotagupdateresponse topotagupdateresponse:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['topotaguuid', 'topotagupdateresponse']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method topology_tag_uuid_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in local_var_params or
                local_var_params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `topology_tag_uuid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in local_var_params:
            path_params['topotaguuid'] = local_var_params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topotagupdateresponse' in local_var_params:
            body_params = local_var_params['topotagupdateresponse']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
