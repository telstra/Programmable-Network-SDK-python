# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.3
    Contact: pnapi-support@team.telstra.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class TopologiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def eisendpointsendpointuuidassigntopologytagpost(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointsendpointuuidassigntopologytagpost(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body9 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, **kwargs)  # noqa: E501
            return data

    def eisendpointsendpointuuidassigntopologytagpost_with_http_info(self, endpointuuid, **kwargs):  # noqa: E501
        """Assign an Endpoint to a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointsendpointuuidassigntopologytagpost_with_http_info(endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :param Body9 body:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpointuuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointsendpointuuidassigntopologytagpost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eisendpointsendpointuuidassigntopologytagpost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/{endpointuuid}/assign_topology_tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eisendpointstopologytaguuiddelete(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuiddelete(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, **kwargs)  # noqa: E501
            return data

    def eisendpointstopologytaguuiddelete_with_http_info(self, topotaguuid, endpointuuid, **kwargs):  # noqa: E501
        """Remove Endpoint from a Topology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuiddelete_with_http_info(topotaguuid, endpointuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param str endpointuuid: Unique identifier representing a specific endpoint (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'endpointuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointstopologytaguuiddelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `eisendpointstopologytaguuiddelete`")  # noqa: E501
        # verify the required parameter 'endpointuuid' is set
        if ('endpointuuid' not in params or
                params['endpointuuid'] is None):
            raise ValueError("Missing the required parameter `endpointuuid` when calling `eisendpointstopologytaguuiddelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501
        if 'endpointuuid' in params:
            path_params['endpointuuid'] = params['endpointuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}/endpoint/{endpointuuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eisendpointstopologytaguuidtopotaguuidget(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuidtopotaguuidget(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def eisendpointstopologytaguuidtopotaguuidget_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List Endpoints for Topology  # noqa: E501

        List all Endpoints associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eisendpointstopologytaguuidtopotaguuidget_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eisendpointstopologytaguuidtopotaguuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `eisendpointstopologytaguuidtopotaguuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/endpoints/topology_tag_uuid/{topotaguuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagget(self, **kwargs):  # noqa: E501
        """List all topology tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagget(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagget_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagget_with_http_info(**kwargs)  # noqa: E501
            return data

    def ttmstopologytagget_with_http_info(self, **kwargs):  # noqa: E501
        """List all topology tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagget_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[Topology]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagget" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Topology]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagpost(self, **kwargs):  # noqa: E501
        """Create a named topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body10 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def ttmstopologytagpost_with_http_info(self, **kwargs):  # noqa: E501
        """Create a named topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body10 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagtopotaguuiddelete(self, topotaguuid, **kwargs):  # noqa: E501
        """Delete a topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuiddelete(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body13 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagtopotaguuiddelete_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagtopotaguuiddelete_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def ttmstopologytagtopotaguuiddelete_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Delete a topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuiddelete_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body13 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagtopotaguuiddelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttmstopologytagtopotaguuiddelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagtopotaguuidget(self, topotaguuid, **kwargs):  # noqa: E501
        """Get information about the specified topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidget(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body11 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagtopotaguuidget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def ttmstopologytagtopotaguuidget_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Get information about the specified topology tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidget_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body11 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagtopotaguuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttmstopologytagtopotaguuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagtopotaguuidobjectsget(self, topotaguuid, **kwargs):  # noqa: E501
        """List objects for Topology  # noqa: E501

        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidobjectsget(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagtopotaguuidobjectsget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagtopotaguuidobjectsget_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def ttmstopologytagtopotaguuidobjectsget_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """List objects for Topology  # noqa: E501

        List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidobjectsget_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagtopotaguuidobjectsget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttmstopologytagtopotaguuidobjectsget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/objects/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ttmstopologytagtopotaguuidput(self, topotaguuid, **kwargs):  # noqa: E501
        """Update a topology tag&#39;s name and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidput(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body12 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ttmstopologytagtopotaguuidput_with_http_info(topotaguuid, **kwargs)  # noqa: E501
        else:
            (data) = self.ttmstopologytagtopotaguuidput_with_http_info(topotaguuid, **kwargs)  # noqa: E501
            return data

    def ttmstopologytagtopotaguuidput_with_http_info(self, topotaguuid, **kwargs):  # noqa: E501
        """Update a topology tag&#39;s name and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ttmstopologytagtopotaguuidput_with_http_info(topotaguuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str topotaguuid: Unique identifier representing a specific topology tag (required)
        :param Body12 body:
        :return: Topology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topotaguuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ttmstopologytagtopotaguuidput" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topotaguuid' is set
        if ('topotaguuid' not in params or
                params['topotaguuid'] is None):
            raise ValueError("Missing the required parameter `topotaguuid` when calling `ttmstopologytagtopotaguuidput`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topotaguuid' in params:
            path_params['topotaguuid'] = params['topotaguuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/ttms/1.0.0/topology_tag/{topotaguuid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Topology',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
