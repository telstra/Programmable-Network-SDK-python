# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class VnfsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def backup_backupuuid_delete(self, backupuuid, **kwargs):  # noqa: E501
        """Delete specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_delete(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_backupuuid_delete_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.backup_backupuuid_delete_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def backup_backupuuid_delete_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Delete specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_delete_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_backupuuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in params or
                params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `backup_backupuuid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in params:
            path_params['backupuuid'] = params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/{backupuuid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_backupuuid_get(self, backupuuid, **kwargs):  # noqa: E501
        """Get information about the specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_get(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_backupuuid_get_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.backup_backupuuid_get_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def backup_backupuuid_get_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Get information about the specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_get_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_backupuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in params or
                params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `backup_backupuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in params:
            path_params['backupuuid'] = params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/{backupuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_backupuuid_restore_post(self, backupuuid, **kwargs):  # noqa: E501
        """Restore VNF from backup  # noqa: E501

        Restore VNF from specified backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_restore_post(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_backupuuid_restore_post_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.backup_backupuuid_restore_post_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def backup_backupuuid_restore_post_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Restore VNF from backup  # noqa: E501

        Restore VNF from specified backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_backupuuid_restore_post_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_backupuuid_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in params or
                params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `backup_backupuuid_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in params:
            path_params['backupuuid'] = params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json''application/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/{backupuuid}/restore/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_post(self, **kwargs):  # noqa: E501
        """Create backup of specified VNF  # noqa: E501

        'Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Backuprequest backuprequest:
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.backup_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def backup_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create backup of specified VNF  # noqa: E501

        'Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Backuprequest backuprequest:
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['backuprequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'backuprequest' in params:
            body_params = params['backuprequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_vnf_vnfuuid_delete_post(self, vnfuuid, **kwargs):  # noqa: E501
        """Delete multiple backups  # noqa: E501

        Delete list of backups associated with specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_vnf_vnfuuid_delete_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_vnf_vnfuuid_delete_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.backup_vnf_vnfuuid_delete_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def backup_vnf_vnfuuid_delete_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Delete multiple backups  # noqa: E501

        Delete list of backups associated with specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_vnf_vnfuuid_delete_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_vnf_vnfuuid_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `backup_vnf_vnfuuid_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/vnf/{vnfuuid}/delete/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_vnf_vnfuuid_get(self, vnfuuid, **kwargs):  # noqa: E501
        """List backups  # noqa: E501

        List available backups for the specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_vnf_vnfuuid_get(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: list[Backup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.backup_vnf_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.backup_vnf_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def backup_vnf_vnfuuid_get_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """List backups  # noqa: E501

        List available backups for the specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_vnf_vnfuuid_get_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: list[Backup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_vnf_vnfuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `backup_vnf_vnfuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/backup/vnf/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Backup]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_vnf_vport_post(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnf_vport_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vportrequest vportrequest:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_vnf_vport_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_vnf_vport_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_vnf_vport_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnf_vport_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vportrequest vportrequest:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vportrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_vnf_vport_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vportrequest' in params:
            body_params = params['vportrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/vnf/vport/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_vnfendpoint_post(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_vnfendpoint_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_vnfendpoint_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_vnfendpoint_post_with_http_info(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfendpointrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_vnfendpoint_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vnfendpointrequest' in params:
            body_params = params['vnfendpointrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/inventory/vnfendpoint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_get(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_get_with_http_info(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/image/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_imageid_add_to_my_images_post(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_add_to_my_images_post(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_imageid_add_to_my_images_post_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_imageid_add_to_my_images_post_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_imageid_add_to_my_images_post_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_add_to_my_images_post_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_imageid_add_to_my_images_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_imageid_add_to_my_images_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json''application/xml', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/image/{imageid}/add_to_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_imageid_get(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_get(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_imageid_get_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_imageid_get_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_imageid_get_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_get_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_imageid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_imageid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/image/{imageid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_imageid_remove_from_my_images_post(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_remove_from_my_images_post(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_imageid_remove_from_my_images_post_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_imageid_remove_from_my_images_post_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_imageid_remove_from_my_images_post_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_imageid_remove_from_my_images_post_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_imageid_remove_from_my_images_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_imageid_remove_from_my_images_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json''application/xml', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/image/{imageid}/remove_from_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_my_images_get(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_my_images_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_my_images_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_my_images_get_with_http_info(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_my_images_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/marketplace/image/my_images/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_vnfuuid_get(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_get(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_vnfuuid_get_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_get_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_vnfuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_vnfuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnf/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_vnfuuid_reboot_post(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_reboot_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Rebootrequest rebootrequest:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_vnfuuid_reboot_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_vnfuuid_reboot_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_vnfuuid_reboot_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_reboot_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Rebootrequest rebootrequest:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid', 'rebootrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_vnfuuid_reboot_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_vnfuuid_reboot_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rebootrequest' in params:
            body_params = params['rebootrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnf/{vnfuuid}/reboot/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_vnfuuid_resume_post(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_resume_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_vnfuuid_resume_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_vnfuuid_resume_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_vnfuuid_resume_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_resume_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_vnfuuid_resume_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_vnfuuid_resume_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnf/{vnfuuid}/resume/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_vnfuuid_suspend_post(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_suspend_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_vnfuuid_suspend_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_vnfuuid_suspend_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_vnfuuid_suspend_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_vnfuuid_suspend_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_vnfuuid_suspend_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_vnfuuid_suspend_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnf/{vnfuuid}/suspend/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfendpoint_vnfuuid_vnfuuid_get(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid_vnfuuid_get(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid_vnfuuid_get_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfendpoint_vnfuuid_vnfuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfendpoint_vnfuuid_vnfuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfendpoint/vnfuuid/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
