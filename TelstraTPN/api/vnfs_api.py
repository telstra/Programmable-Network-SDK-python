# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class VnfsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def marketplace_image_add_to_my_images_by_imageid_post(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidaddtomyimagespost  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_add_to_my_images_by_imageid_post(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body: 
        :return: MarketplaceimageimageidaddtomyimagespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_add_to_my_images_by_imageid_post_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_add_to_my_images_by_imageid_post_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_add_to_my_images_by_imageid_post_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidaddtomyimagespost  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_add_to_my_images_by_imageid_post_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body: 
        :return: MarketplaceimageimageidaddtomyimagespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_add_to_my_images_by_imageid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_add_to_my_images_by_imageid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/add_to_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketplaceimageimageidaddtomyimagespostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_by_imageid_get(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidget  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_by_imageid_get(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_by_imageid_get_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_by_imageid_get_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_by_imageid_get_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidget  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_by_imageid_get_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_by_imageid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_by_imageid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_get(self, **kwargs):  # noqa: E501
        """marketplaceimageget  # noqa: E501

        List images in the Marketplace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketplaceimagegetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_get_with_http_info(self, **kwargs):  # noqa: E501
        """marketplaceimageget  # noqa: E501

        List images in the Marketplace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketplaceimagegetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketplaceimagegetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_my_images_get(self, **kwargs):  # noqa: E501
        """marketplaceimagemyimagesget  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketplaceimagemyimagesgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_my_images_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_my_images_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_my_images_get_with_http_info(self, **kwargs):  # noqa: E501
        """marketplaceimagemyimagesget  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MarketplaceimagemyimagesgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_my_images_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/my_images/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketplaceimagemyimagesgetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_remove_from_my_images_by_imageid_post(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidremovefrommyimagespost  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_remove_from_my_images_by_imageid_post(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body: 
        :return: MarketplaceimageimageidremovefrommyimagespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_remove_from_my_images_by_imageid_post_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_remove_from_my_images_by_imageid_post_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_remove_from_my_images_by_imageid_post_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """marketplaceimageimageidremovefrommyimagespost  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_remove_from_my_images_by_imageid_post_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body: 
        :return: MarketplaceimageimageidremovefrommyimagespostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_remove_from_my_images_by_imageid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_remove_from_my_images_by_imageid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/remove_from_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketplaceimageimageidremovefrommyimagespostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfds100_vnf_by_vnfuuid_get(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidget  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_by_vnfuuid_get(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: VnfdsvnfvnfuuidgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfds100_vnf_by_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfds100_vnf_by_vnfuuid_get_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfds100_vnf_by_vnfuuid_get_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidget  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_by_vnfuuid_get_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: VnfdsvnfvnfuuidgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfds100_vnf_by_vnfuuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfds100_vnf_by_vnfuuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VnfdsvnfvnfuuidgetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfds100_vnf_reboot_by_vnfuuid_post(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidrebootpost  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_reboot_by_vnfuuid_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Body80 body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfds100_vnf_reboot_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfds100_vnf_reboot_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfds100_vnf_reboot_by_vnfuuid_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidrebootpost  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_reboot_by_vnfuuid_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Body80 body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfds100_vnf_reboot_by_vnfuuid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfds100_vnf_reboot_by_vnfuuid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/reboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfds100_vnf_resume_by_vnfuuid_post(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidresumepost  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_resume_by_vnfuuid_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfds100_vnf_resume_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfds100_vnf_resume_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfds100_vnf_resume_by_vnfuuid_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidresumepost  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_resume_by_vnfuuid_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfds100_vnf_resume_by_vnfuuid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfds100_vnf_resume_by_vnfuuid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfds100_vnf_suspend_by_vnfuuid_post(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidsuspendpost  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_suspend_by_vnfuuid_post(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfds100_vnf_suspend_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfds100_vnf_suspend_by_vnfuuid_post_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfds100_vnf_suspend_by_vnfuuid_post_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """vnfdsvnfvnfuuidsuspendpost  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfds100_vnf_suspend_by_vnfuuid_post_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfds100_vnf_suspend_by_vnfuuid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfds100_vnf_suspend_by_vnfuuid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['auth']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
