# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.3
    Contact: pnapi-support@team.telstra.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class VnfsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def inventoryvnfendpointpost(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfendpointpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body7 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryvnfendpointpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventoryvnfendpointpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventoryvnfendpointpost_with_http_info(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfendpointpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body7 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryvnfendpointpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/vnfendpoint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventoryvnfvportpost(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfvportpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body6 body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventoryvnfvportpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventoryvnfvportpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventoryvnfvportpost_with_http_info(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventoryvnfvportpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body6 body:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventoryvnfvportpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/vnf/vport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplaceimageget(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageget(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplaceimageget_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplaceimageget_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplaceimageget_with_http_info(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageget_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplaceimageget" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplaceimageimageidaddtomyimagespost(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidaddtomyimagespost(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplaceimageimageidaddtomyimagespost_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplaceimageimageidaddtomyimagespost_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplaceimageimageidaddtomyimagespost_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidaddtomyimagespost_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplaceimageimageidaddtomyimagespost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplaceimageimageidaddtomyimagespost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/add_to_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplaceimageimageidget(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidget(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplaceimageimageidget_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplaceimageimageidget_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplaceimageimageidget_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidget_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplaceimageimageidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplaceimageimageidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplaceimageimageidremovefrommyimagespost(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidremovefrommyimagespost(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplaceimageimageidremovefrommyimagespost_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplaceimageimageidremovefrommyimagespost_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplaceimageimageidremovefrommyimagespost_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimageimageidremovefrommyimagespost_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param object body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplaceimageimageidremovefrommyimagespost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in params or
                params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplaceimageimageidremovefrommyimagespost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in params:
            path_params['imageid'] = params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/remove_from_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplaceimagemyimagesget(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimagemyimagesget(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplaceimagemyimagesget_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplaceimagemyimagesget_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplaceimagemyimagesget_with_http_info(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplaceimagemyimagesget_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplaceimagemyimagesget" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/my_images/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfdsvnfvnfuuidget(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidget(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfdsvnfvnfuuidget_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfdsvnfvnfuuidget_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfdsvnfvnfuuidget_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidget_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfdsvnfvnfuuidget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfdsvnfvnfuuidget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfdsvnfvnfuuidrebootpost(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidrebootpost(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Body14 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfdsvnfvnfuuidrebootpost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfdsvnfvnfuuidrebootpost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfdsvnfvnfuuidrebootpost_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidrebootpost_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Body14 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfdsvnfvnfuuidrebootpost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfdsvnfvnfuuidrebootpost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/reboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfdsvnfvnfuuidresumepost(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidresumepost(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfdsvnfvnfuuidresumepost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfdsvnfvnfuuidresumepost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfdsvnfvnfuuidresumepost_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidresumepost_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfdsvnfvnfuuidresumepost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfdsvnfvnfuuidresumepost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfdsvnfvnfuuidsuspendpost(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidsuspendpost(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfdsvnfvnfuuidsuspendpost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfdsvnfvnfuuidsuspendpost_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfdsvnfvnfuuidsuspendpost_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfdsvnfvnfuuidsuspendpost_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfdsvnfvnfuuidsuspendpost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in params or
                params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfdsvnfvnfuuidsuspendpost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in params:
            path_params['vnfuuid'] = params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
