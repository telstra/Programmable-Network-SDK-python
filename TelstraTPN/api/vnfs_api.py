# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from TelstraTPN.api_client import ApiClient


class VnfsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bms_backup(self, **kwargs):  # noqa: E501
        """Create backup of specified VNF  # noqa: E501

        'Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup(async=True)
        >>> result = thread.get()

        :param async bool
        :param Backuprequest backuprequest:
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_with_http_info(**kwargs)  # noqa: E501
            return data

    def bms_backup_with_http_info(self, **kwargs):  # noqa: E501
        """Create backup of specified VNF  # noqa: E501

        'Note: if a second backup creation is attempted while one is already active, an error will be returned indicating that the VNF is invalid. If replace_backup_uuid is provided, this backup is deleted once the new backup is successfully completed'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Backuprequest backuprequest:
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['backuprequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'backuprequest' in local_var_params:
            body_params = local_var_params['backuprequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bms_backup_delete(self, backupuuid, **kwargs):  # noqa: E501
        """Delete specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_delete(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_delete_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_delete_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def bms_backup_delete_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Delete specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_delete_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in local_var_params or
                local_var_params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `bms_backup_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in local_var_params:
            path_params['backupuuid'] = local_var_params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup/{backupuuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bms_backup_get(self, backupuuid, **kwargs):  # noqa: E501
        """Get information about the specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_get(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_get_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_get_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def bms_backup_get_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Get information about the specified backup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_get_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in local_var_params or
                local_var_params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `bms_backup_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in local_var_params:
            path_params['backupuuid'] = local_var_params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup/{backupuuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bms_backup_restore(self, backupuuid, **kwargs):  # noqa: E501
        """Restore VNF from backup  # noqa: E501

        Restore VNF from specified backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_restore(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_restore_with_http_info(backupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_restore_with_http_info(backupuuid, **kwargs)  # noqa: E501
            return data

    def bms_backup_restore_with_http_info(self, backupuuid, **kwargs):  # noqa: E501
        """Restore VNF from backup  # noqa: E501

        Restore VNF from specified backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_restore_with_http_info(backupuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str backupuuid: Unique identifier representing a specific VNF backup (required)
        :return: Backup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['backupuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup_restore" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'backupuuid' is set
        if ('backupuuid' not in local_var_params or
                local_var_params['backupuuid'] is None):
            raise ValueError("Missing the required parameter `backupuuid` when calling `bms_backup_restore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'backupuuid' in local_var_params:
            path_params['backupuuid'] = local_var_params['backupuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup/{backupuuid}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Backup',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bms_backup_vnf(self, vnfuuid, **kwargs):  # noqa: E501
        """List backups  # noqa: E501

        List available backups for the specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_vnf(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: list[Backup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_vnf_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_vnf_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def bms_backup_vnf_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """List backups  # noqa: E501

        List available backups for the specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_vnf_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: list[Backup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup_vnf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `bms_backup_vnf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup/vnf/{vnfuuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Backup]',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bms_backup_vnf_delete(self, vnfuuid, **kwargs):  # noqa: E501
        """Delete multiple backups  # noqa: E501

        Delete list of backups associated with specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_vnf_delete(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.bms_backup_vnf_delete_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.bms_backup_vnf_delete_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def bms_backup_vnf_delete_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Delete multiple backups  # noqa: E501

        Delete list of backups associated with specified VNF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.bms_backup_vnf_delete_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bms_backup_vnf_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `bms_backup_vnf_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/bms/1.0.0/backup/vnf/{vnfuuid}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_vnf_vport(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnf_vport(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vportrequest vportrequest:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_vnf_vport_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_vnf_vport_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_vnf_vport_with_http_info(self, **kwargs):  # noqa: E501
        """Create VNF VPort  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnf_vport_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vportrequest vportrequest:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vportrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_vnf_vport" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vportrequest' in local_var_params:
            body_params = local_var_params['vportrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/vnf/vport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inventory_vnfendpoint(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.inventory_vnfendpoint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.inventory_vnfendpoint_with_http_info(**kwargs)  # noqa: E501
            return data

    def inventory_vnfendpoint_with_http_info(self, **kwargs):  # noqa: E501
        """Instantiate Virtual Network Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.inventory_vnfendpoint_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Vnfendpointrequest vnfendpointrequest:
        :return: SuccessFragment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfendpointrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inventory_vnfendpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vnfendpointrequest' in local_var_params:
            body_params = local_var_params['vnfendpointrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/inventory/vnfendpoint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessFragment',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_with_http_info(self, **kwargs):  # noqa: E501
        """List images in the Marketplace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_0(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_0(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_0_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_0_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_0_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Get information about the specified image  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_0_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['imageid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in local_var_params or
                local_var_params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in local_var_params:
            path_params['imageid'] = local_var_params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_add(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_add(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_add_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_add_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_add_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Add specified image to \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_add_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['imageid', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_add" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in local_var_params or
                local_var_params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in local_var_params:
            path_params['imageid'] = local_var_params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/add_to_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_my_images(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_my_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_my_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketplace_image_my_images_with_http_info(self, **kwargs):  # noqa: E501
        """List images in \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_my_images_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_my_images" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/my_images/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketplace_image_remove(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_remove(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.marketplace_image_remove_with_http_info(imageid, **kwargs)  # noqa: E501
        else:
            (data) = self.marketplace_image_remove_with_http_info(imageid, **kwargs)  # noqa: E501
            return data

    def marketplace_image_remove_with_http_info(self, imageid, **kwargs):  # noqa: E501
        """Remove specified image from \&quot;My Images\&quot;  # noqa: E501

        Note that trailing / is required, body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.marketplace_image_remove_with_http_info(imageid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int imageid: Identifier representing a specific VNF image (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['imageid', 'unknown_base_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketplace_image_remove" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'imageid' is set
        if ('imageid' not in local_var_params or
                local_var_params['imageid'] is None):
            raise ValueError("Missing the required parameter `imageid` when calling `marketplace_image_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageid' in local_var_params:
            path_params['imageid'] = local_var_params['imageid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', ])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/1.0.0/marketplace/image/{imageid}/remove_from_my_images/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get status information about the specified VNF  # noqa: E501

        'Possible return values:   ACTIVE,   BUILD,   SHUTOFF,   VERIFY_RESIZE,   PAUSED,   SUSPENDED,   RESCUE,   ERROR,   DELETED,   SOFT_DELETED,   SHELVED,   SHELVED_OFFLOADED'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_reboot(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_reboot(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Rebootrequest rebootrequest:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_reboot_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_reboot_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_reboot_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Reboot the specified VNF  # noqa: E501

        reboot_type is 'warm' or 'cold'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_reboot_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :param Rebootrequest rebootrequest:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid', 'rebootrequest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_reboot" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_reboot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rebootrequest' in local_var_params:
            body_params = local_var_params['rebootrequest']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/reboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_resume(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_resume(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_resume_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_resume_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_resume_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Resume the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_resume_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_resume" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_resume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnf_suspend(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_suspend(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnf_suspend_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnf_suspend_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnf_suspend_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Suspend the specified VNF  # noqa: E501

        Note that body must be {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnf_suspend_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnf_suspend" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnf_suspend`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/vnfds/1.0.0/vnf/{vnfuuid}/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vnfendpoint_vnfuuid(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.vnfendpoint_vnfuuid_with_http_info(vnfuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.vnfendpoint_vnfuuid_with_http_info(vnfuuid, **kwargs)  # noqa: E501
            return data

    def vnfendpoint_vnfuuid_with_http_info(self, vnfuuid, **kwargs):  # noqa: E501
        """Get details of a specific VNF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.vnfendpoint_vnfuuid_with_http_info(vnfuuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vnfuuid: Unique identifier representing a specific virtual network function (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['vnfuuid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vnfendpoint_vnfuuid" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'vnfuuid' is set
        if ('vnfuuid' not in local_var_params or
                local_var_params['vnfuuid'] is None):
            raise ValueError("Missing the required parameter `vnfuuid` when calling `vnfendpoint_vnfuuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vnfuuid' in local_var_params:
            path_params['vnfuuid'] = local_var_params['vnfuuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/eis/1.0.0/vnfendpoint/vnfuuid/{vnfuuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
