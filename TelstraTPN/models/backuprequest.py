# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Backuprequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vnf_uuid': 'str',
        'backup_name': 'str',
        'replace_backup_uuid': 'str'
    }

    attribute_map = {
        'vnf_uuid': 'vnf_uuid',
        'backup_name': 'backup_name',
        'replace_backup_uuid': 'replace_backup_uuid'
    }

    def __init__(self, vnf_uuid=None, backup_name=None, replace_backup_uuid=None):  # noqa: E501
        """Backuprequest - a model defined in OpenAPI"""  # noqa: E501

        self._vnf_uuid = None
        self._backup_name = None
        self._replace_backup_uuid = None
        self.discriminator = None

        self.vnf_uuid = vnf_uuid
        self.backup_name = backup_name
        if replace_backup_uuid is not None:
            self.replace_backup_uuid = replace_backup_uuid

    @property
    def vnf_uuid(self):
        """Gets the vnf_uuid of this Backuprequest.  # noqa: E501


        :return: The vnf_uuid of this Backuprequest.  # noqa: E501
        :rtype: str
        """
        return self._vnf_uuid

    @vnf_uuid.setter
    def vnf_uuid(self, vnf_uuid):
        """Sets the vnf_uuid of this Backuprequest.


        :param vnf_uuid: The vnf_uuid of this Backuprequest.  # noqa: E501
        :type: str
        """
        if vnf_uuid is None:
            raise ValueError("Invalid value for `vnf_uuid`, must not be `None`")  # noqa: E501

        self._vnf_uuid = vnf_uuid

    @property
    def backup_name(self):
        """Gets the backup_name of this Backuprequest.  # noqa: E501


        :return: The backup_name of this Backuprequest.  # noqa: E501
        :rtype: str
        """
        return self._backup_name

    @backup_name.setter
    def backup_name(self, backup_name):
        """Sets the backup_name of this Backuprequest.


        :param backup_name: The backup_name of this Backuprequest.  # noqa: E501
        :type: str
        """
        if backup_name is None:
            raise ValueError("Invalid value for `backup_name`, must not be `None`")  # noqa: E501

        self._backup_name = backup_name

    @property
    def replace_backup_uuid(self):
        """Gets the replace_backup_uuid of this Backuprequest.  # noqa: E501


        :return: The replace_backup_uuid of this Backuprequest.  # noqa: E501
        :rtype: str
        """
        return self._replace_backup_uuid

    @replace_backup_uuid.setter
    def replace_backup_uuid(self, replace_backup_uuid):
        """Sets the replace_backup_uuid of this Backuprequest.


        :param replace_backup_uuid: The replace_backup_uuid of this Backuprequest.  # noqa: E501
        :type: str
        """

        self._replace_backup_uuid = replace_backup_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Backuprequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
