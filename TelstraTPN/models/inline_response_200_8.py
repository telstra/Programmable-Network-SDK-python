# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.3
    Contact: pnapi-support@team.telstra.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from TelstraTPN.models.endpoint import Endpoint  # noqa: F401,E501


class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoints': 'list[Endpoint]',
        'sharedvports': 'list[str]',
        'topology_id': 'str'
    }

    attribute_map = {
        'endpoints': 'endpoints',
        'sharedvports': 'sharedvports',
        'topology_id': 'topology-id'
    }

    def __init__(self, endpoints=None, sharedvports=None, topology_id=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501

        self._endpoints = None
        self._sharedvports = None
        self._topology_id = None
        self.discriminator = None

        if endpoints is not None:
            self.endpoints = endpoints
        if sharedvports is not None:
            self.sharedvports = sharedvports
        if topology_id is not None:
            self.topology_id = topology_id

    @property
    def endpoints(self):
        """Gets the endpoints of this InlineResponse2008.  # noqa: E501


        :return: The endpoints of this InlineResponse2008.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this InlineResponse2008.


        :param endpoints: The endpoints of this InlineResponse2008.  # noqa: E501
        :type: list[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def sharedvports(self):
        """Gets the sharedvports of this InlineResponse2008.  # noqa: E501


        :return: The sharedvports of this InlineResponse2008.  # noqa: E501
        :rtype: list[str]
        """
        return self._sharedvports

    @sharedvports.setter
    def sharedvports(self, sharedvports):
        """Sets the sharedvports of this InlineResponse2008.


        :param sharedvports: The sharedvports of this InlineResponse2008.  # noqa: E501
        :type: list[str]
        """

        self._sharedvports = sharedvports

    @property
    def topology_id(self):
        """Gets the topology_id of this InlineResponse2008.  # noqa: E501


        :return: The topology_id of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._topology_id

    @topology_id.setter
    def topology_id(self, topology_id):
        """Sets the topology_id of this InlineResponse2008.


        :param topology_id: The topology_id of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._topology_id = topology_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
