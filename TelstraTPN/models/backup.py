# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Backup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_name': 'str',
        'uuid': 'str',
        'vnf_uuid': 'str',
        'glance_image_id': 'str',
        'backup_schedule_uuid': 'str',
        'total_interfaces': 'int',
        'backup_started_at': 'str',
        'backup_completed_at': 'str',
        'backup_restored_at': 'str',
        'backup_restored_by': 'str',
        'replace_backup_uuid': 'str',
        'status': 'str',
        'status_code': 'str'
    }

    attribute_map = {
        'backup_name': 'backup_name',
        'uuid': 'uuid',
        'vnf_uuid': 'vnf_uuid',
        'glance_image_id': 'glance_image_id',
        'backup_schedule_uuid': 'backup_schedule_uuid',
        'total_interfaces': 'total_interfaces',
        'backup_started_at': 'backup_started_at',
        'backup_completed_at': 'backup_completed_at',
        'backup_restored_at': 'backup_restored_at',
        'backup_restored_by': 'backup_restored_by',
        'replace_backup_uuid': 'replace_backup_uuid',
        'status': 'Status',
        'status_code': 'status_code'
    }

    def __init__(self, backup_name=None, uuid=None, vnf_uuid=None, glance_image_id=None, backup_schedule_uuid=None, total_interfaces=None, backup_started_at=None, backup_completed_at=None, backup_restored_at=None, backup_restored_by=None, replace_backup_uuid=None, status=None, status_code=None):  # noqa: E501
        """Backup - a model defined in OpenAPI"""  # noqa: E501

        self._backup_name = None
        self._uuid = None
        self._vnf_uuid = None
        self._glance_image_id = None
        self._backup_schedule_uuid = None
        self._total_interfaces = None
        self._backup_started_at = None
        self._backup_completed_at = None
        self._backup_restored_at = None
        self._backup_restored_by = None
        self._replace_backup_uuid = None
        self._status = None
        self._status_code = None
        self.discriminator = None

        if backup_name is not None:
            self.backup_name = backup_name
        if uuid is not None:
            self.uuid = uuid
        if vnf_uuid is not None:
            self.vnf_uuid = vnf_uuid
        if glance_image_id is not None:
            self.glance_image_id = glance_image_id
        if backup_schedule_uuid is not None:
            self.backup_schedule_uuid = backup_schedule_uuid
        if total_interfaces is not None:
            self.total_interfaces = total_interfaces
        if backup_started_at is not None:
            self.backup_started_at = backup_started_at
        if backup_completed_at is not None:
            self.backup_completed_at = backup_completed_at
        if backup_restored_at is not None:
            self.backup_restored_at = backup_restored_at
        if backup_restored_by is not None:
            self.backup_restored_by = backup_restored_by
        if replace_backup_uuid is not None:
            self.replace_backup_uuid = replace_backup_uuid
        if status is not None:
            self.status = status
        if status_code is not None:
            self.status_code = status_code

    @property
    def backup_name(self):
        """Gets the backup_name of this Backup.  # noqa: E501

        User-defined name referring to the backup  # noqa: E501

        :return: The backup_name of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_name

    @backup_name.setter
    def backup_name(self, backup_name):
        """Sets the backup_name of this Backup.

        User-defined name referring to the backup  # noqa: E501

        :param backup_name: The backup_name of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_name = backup_name

    @property
    def uuid(self):
        """Gets the uuid of this Backup.  # noqa: E501

        UUID of the backup instance  # noqa: E501

        :return: The uuid of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Backup.

        UUID of the backup instance  # noqa: E501

        :param uuid: The uuid of this Backup.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vnf_uuid(self):
        """Gets the vnf_uuid of this Backup.  # noqa: E501

        UUID of the VNF being backed up  # noqa: E501

        :return: The vnf_uuid of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._vnf_uuid

    @vnf_uuid.setter
    def vnf_uuid(self, vnf_uuid):
        """Sets the vnf_uuid of this Backup.

        UUID of the VNF being backed up  # noqa: E501

        :param vnf_uuid: The vnf_uuid of this Backup.  # noqa: E501
        :type: str
        """

        self._vnf_uuid = vnf_uuid

    @property
    def glance_image_id(self):
        """Gets the glance_image_id of this Backup.  # noqa: E501

        UUID of the underlying image id for the backup  # noqa: E501

        :return: The glance_image_id of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._glance_image_id

    @glance_image_id.setter
    def glance_image_id(self, glance_image_id):
        """Sets the glance_image_id of this Backup.

        UUID of the underlying image id for the backup  # noqa: E501

        :param glance_image_id: The glance_image_id of this Backup.  # noqa: E501
        :type: str
        """

        self._glance_image_id = glance_image_id

    @property
    def backup_schedule_uuid(self):
        """Gets the backup_schedule_uuid of this Backup.  # noqa: E501


        :return: The backup_schedule_uuid of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_schedule_uuid

    @backup_schedule_uuid.setter
    def backup_schedule_uuid(self, backup_schedule_uuid):
        """Sets the backup_schedule_uuid of this Backup.


        :param backup_schedule_uuid: The backup_schedule_uuid of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_schedule_uuid = backup_schedule_uuid

    @property
    def total_interfaces(self):
        """Gets the total_interfaces of this Backup.  # noqa: E501

        Number of virtual interfaces active when the VNF was backed up  # noqa: E501

        :return: The total_interfaces of this Backup.  # noqa: E501
        :rtype: int
        """
        return self._total_interfaces

    @total_interfaces.setter
    def total_interfaces(self, total_interfaces):
        """Sets the total_interfaces of this Backup.

        Number of virtual interfaces active when the VNF was backed up  # noqa: E501

        :param total_interfaces: The total_interfaces of this Backup.  # noqa: E501
        :type: int
        """

        self._total_interfaces = total_interfaces

    @property
    def backup_started_at(self):
        """Gets the backup_started_at of this Backup.  # noqa: E501

        Time at which backup was started YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :return: The backup_started_at of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_started_at

    @backup_started_at.setter
    def backup_started_at(self, backup_started_at):
        """Sets the backup_started_at of this Backup.

        Time at which backup was started YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :param backup_started_at: The backup_started_at of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_started_at = backup_started_at

    @property
    def backup_completed_at(self):
        """Gets the backup_completed_at of this Backup.  # noqa: E501

        Time at which backup was completed YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :return: The backup_completed_at of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_completed_at

    @backup_completed_at.setter
    def backup_completed_at(self, backup_completed_at):
        """Sets the backup_completed_at of this Backup.

        Time at which backup was completed YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :param backup_completed_at: The backup_completed_at of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_completed_at = backup_completed_at

    @property
    def backup_restored_at(self):
        """Gets the backup_restored_at of this Backup.  # noqa: E501

        Time at which backup was most recently restored YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :return: The backup_restored_at of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_restored_at

    @backup_restored_at.setter
    def backup_restored_at(self, backup_restored_at):
        """Sets the backup_restored_at of this Backup.

        Time at which backup was most recently restored YYYY-MM-DD HH:MM:SS.S  # noqa: E501

        :param backup_restored_at: The backup_restored_at of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_restored_at = backup_restored_at

    @property
    def backup_restored_by(self):
        """Gets the backup_restored_by of this Backup.  # noqa: E501

        UUID of the user who most recently restored the backup  # noqa: E501

        :return: The backup_restored_by of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._backup_restored_by

    @backup_restored_by.setter
    def backup_restored_by(self, backup_restored_by):
        """Sets the backup_restored_by of this Backup.

        UUID of the user who most recently restored the backup  # noqa: E501

        :param backup_restored_by: The backup_restored_by of this Backup.  # noqa: E501
        :type: str
        """

        self._backup_restored_by = backup_restored_by

    @property
    def replace_backup_uuid(self):
        """Gets the replace_backup_uuid of this Backup.  # noqa: E501

        UUID of the backup that the current backup replaced  # noqa: E501

        :return: The replace_backup_uuid of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._replace_backup_uuid

    @replace_backup_uuid.setter
    def replace_backup_uuid(self, replace_backup_uuid):
        """Sets the replace_backup_uuid of this Backup.

        UUID of the backup that the current backup replaced  # noqa: E501

        :param replace_backup_uuid: The replace_backup_uuid of this Backup.  # noqa: E501
        :type: str
        """

        self._replace_backup_uuid = replace_backup_uuid

    @property
    def status(self):
        """Gets the status of this Backup.  # noqa: E501

        Description of the current state of the backup  # noqa: E501

        :return: The status of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Backup.

        Description of the current state of the backup  # noqa: E501

        :param status: The status of this Backup.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this Backup.  # noqa: E501

        \"Unique code representing the current state of the backup:   CRG=Creating, CRE=Created, DLG=Deleting, DEL=Deleted,   REG=Restoring, ACT=Active/Restored\"  # noqa: E501

        :return: The status_code of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Backup.

        \"Unique code representing the current state of the backup:   CRG=Creating, CRE=Created, DLG=Deleting, DEL=Deleted,   REG=Restoring, ACT=Active/Restored\"  # noqa: E501

        :param status_code: The status_code of this Backup.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Backup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
