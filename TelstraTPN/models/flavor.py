# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Flavor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'description': 'str',
        'disk': 'int',
        'ephemeral': 'int',
        'id': 'int',
        'name': 'str',
        'price': 'float',
        'ram': 'int',
        'specific_customer': 'str',
        'swap': 'int',
        'vcpus': 'int'
    }

    attribute_map = {
        'currency': 'currency',
        'description': 'description',
        'disk': 'disk',
        'ephemeral': 'ephemeral',
        'id': 'id',
        'name': 'name',
        'price': 'price',
        'ram': 'ram',
        'specific_customer': 'specific_customer',
        'swap': 'swap',
        'vcpus': 'vcpus'
    }

    def __init__(self, currency=None, description=None, disk=None, ephemeral=None, id=None, name=None, price=None, ram=None, specific_customer=None, swap=None, vcpus=None):  # noqa: E501
        """Flavor - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._description = None
        self._disk = None
        self._ephemeral = None
        self._id = None
        self._name = None
        self._price = None
        self._ram = None
        self._specific_customer = None
        self._swap = None
        self._vcpus = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if disk is not None:
            self.disk = disk
        if ephemeral is not None:
            self.ephemeral = ephemeral
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if ram is not None:
            self.ram = ram
        if specific_customer is not None:
            self.specific_customer = specific_customer
        if swap is not None:
            self.swap = swap
        if vcpus is not None:
            self.vcpus = vcpus

    @property
    def currency(self):
        """Gets the currency of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The currency of this Flavor.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Flavor.

          # noqa: E501

        :param currency: The currency of this Flavor.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The description of this Flavor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Flavor.

          # noqa: E501

        :param description: The description of this Flavor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disk(self):
        """Gets the disk of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The disk of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Flavor.

          # noqa: E501

        :param disk: The disk of this Flavor.  # noqa: E501
        :type: int
        """

        self._disk = disk

    @property
    def ephemeral(self):
        """Gets the ephemeral of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The ephemeral of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._ephemeral

    @ephemeral.setter
    def ephemeral(self, ephemeral):
        """Sets the ephemeral of this Flavor.

          # noqa: E501

        :param ephemeral: The ephemeral of this Flavor.  # noqa: E501
        :type: int
        """

        self._ephemeral = ephemeral

    @property
    def id(self):
        """Gets the id of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The id of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Flavor.

          # noqa: E501

        :param id: The id of this Flavor.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The name of this Flavor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flavor.

          # noqa: E501

        :param name: The name of this Flavor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The price of this Flavor.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Flavor.

          # noqa: E501

        :param price: The price of this Flavor.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def ram(self):
        """Gets the ram of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The ram of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this Flavor.

          # noqa: E501

        :param ram: The ram of this Flavor.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def specific_customer(self):
        """Gets the specific_customer of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The specific_customer of this Flavor.  # noqa: E501
        :rtype: str
        """
        return self._specific_customer

    @specific_customer.setter
    def specific_customer(self, specific_customer):
        """Sets the specific_customer of this Flavor.

          # noqa: E501

        :param specific_customer: The specific_customer of this Flavor.  # noqa: E501
        :type: str
        """

        self._specific_customer = specific_customer

    @property
    def swap(self):
        """Gets the swap of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The swap of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._swap

    @swap.setter
    def swap(self, swap):
        """Sets the swap of this Flavor.

          # noqa: E501

        :param swap: The swap of this Flavor.  # noqa: E501
        :type: int
        """

        self._swap = swap

    @property
    def vcpus(self):
        """Gets the vcpus of this Flavor.  # noqa: E501

          # noqa: E501

        :return: The vcpus of this Flavor.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this Flavor.

          # noqa: E501

        :param vcpus: The vcpus of this Flavor.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Flavor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
