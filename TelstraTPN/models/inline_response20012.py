# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20012(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'is_provider': 'bool',
        'visit_card_uuid': 'str',
        'is_public': 'bool',
        'pops': 'list[str]',
        'pending_requests_count': 'int',
        'approved_requests_count': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'is_provider': 'is_provider',
        'visit_card_uuid': 'visit_card_uuid',
        'is_public': 'is_public',
        'pops': 'pops',
        'pending_requests_count': 'pending_requests_count',
        'approved_requests_count': 'approved_requests_count'
    }

    def __init__(self, uuid=None, is_provider=None, visit_card_uuid=None, is_public=None, pops=None, pending_requests_count=None, approved_requests_count=None):  # noqa: E501
        """InlineResponse20012 - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._is_provider = None
        self._visit_card_uuid = None
        self._is_public = None
        self._pops = None
        self._pending_requests_count = None
        self._approved_requests_count = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if is_provider is not None:
            self.is_provider = is_provider
        if visit_card_uuid is not None:
            self.visit_card_uuid = visit_card_uuid
        if is_public is not None:
            self.is_public = is_public
        if pops is not None:
            self.pops = pops
        if pending_requests_count is not None:
            self.pending_requests_count = pending_requests_count
        if approved_requests_count is not None:
            self.approved_requests_count = approved_requests_count

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20012.  # noqa: E501


        :return: The uuid of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20012.


        :param uuid: The uuid of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def is_provider(self):
        """Gets the is_provider of this InlineResponse20012.  # noqa: E501


        :return: The is_provider of this InlineResponse20012.  # noqa: E501
        :rtype: bool
        """
        return self._is_provider

    @is_provider.setter
    def is_provider(self, is_provider):
        """Sets the is_provider of this InlineResponse20012.


        :param is_provider: The is_provider of this InlineResponse20012.  # noqa: E501
        :type: bool
        """

        self._is_provider = is_provider

    @property
    def visit_card_uuid(self):
        """Gets the visit_card_uuid of this InlineResponse20012.  # noqa: E501


        :return: The visit_card_uuid of this InlineResponse20012.  # noqa: E501
        :rtype: str
        """
        return self._visit_card_uuid

    @visit_card_uuid.setter
    def visit_card_uuid(self, visit_card_uuid):
        """Sets the visit_card_uuid of this InlineResponse20012.


        :param visit_card_uuid: The visit_card_uuid of this InlineResponse20012.  # noqa: E501
        :type: str
        """

        self._visit_card_uuid = visit_card_uuid

    @property
    def is_public(self):
        """Gets the is_public of this InlineResponse20012.  # noqa: E501


        :return: The is_public of this InlineResponse20012.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this InlineResponse20012.


        :param is_public: The is_public of this InlineResponse20012.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def pops(self):
        """Gets the pops of this InlineResponse20012.  # noqa: E501

        XXX fix me  # noqa: E501

        :return: The pops of this InlineResponse20012.  # noqa: E501
        :rtype: list[str]
        """
        return self._pops

    @pops.setter
    def pops(self, pops):
        """Sets the pops of this InlineResponse20012.

        XXX fix me  # noqa: E501

        :param pops: The pops of this InlineResponse20012.  # noqa: E501
        :type: list[str]
        """

        self._pops = pops

    @property
    def pending_requests_count(self):
        """Gets the pending_requests_count of this InlineResponse20012.  # noqa: E501


        :return: The pending_requests_count of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._pending_requests_count

    @pending_requests_count.setter
    def pending_requests_count(self, pending_requests_count):
        """Sets the pending_requests_count of this InlineResponse20012.


        :param pending_requests_count: The pending_requests_count of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._pending_requests_count = pending_requests_count

    @property
    def approved_requests_count(self):
        """Gets the approved_requests_count of this InlineResponse20012.  # noqa: E501


        :return: The approved_requests_count of this InlineResponse20012.  # noqa: E501
        :rtype: int
        """
        return self._approved_requests_count

    @approved_requests_count.setter
    def approved_requests_count(self, approved_requests_count):
        """Sets the approved_requests_count of this InlineResponse20012.


        :param approved_requests_count: The approved_requests_count of this InlineResponse20012.  # noqa: E501
        :type: int
        """

        self._approved_requests_count = approved_requests_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
