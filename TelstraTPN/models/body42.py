# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body42(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'duration': 'int',
        'renewal_option': 'int'
    }

    attribute_map = {
        'bandwidth': 'bandwidth',
        'duration': 'duration',
        'renewal_option': 'renewal-option'
    }

    def __init__(self, bandwidth=None, duration=None, renewal_option=None):  # noqa: E501
        """Body42 - a model defined in Swagger"""  # noqa: E501

        self._bandwidth = None
        self._duration = None
        self._renewal_option = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if duration is not None:
            self.duration = duration
        if renewal_option is not None:
            self.renewal_option = renewal_option

    @property
    def bandwidth(self):
        """Gets the bandwidth of this Body42.  # noqa: E501

        Bandwidth in MB/s (not kB/s)  # noqa: E501

        :return: The bandwidth of this Body42.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this Body42.

        Bandwidth in MB/s (not kB/s)  # noqa: E501

        :param bandwidth: The bandwidth of this Body42.  # noqa: E501
        :type: int
        """
        if bandwidth is not None and bandwidth > 10000:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value less than or equal to `10000`")  # noqa: E501
        if bandwidth is not None and bandwidth < 1:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def duration(self):
        """Gets the duration of this Body42.  # noqa: E501

        Duration of contract in hours (not minutes)  # noqa: E501

        :return: The duration of this Body42.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Body42.

        Duration of contract in hours (not minutes)  # noqa: E501

        :param duration: The duration of this Body42.  # noqa: E501
        :type: int
        """
        if duration is not None and duration < 1:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._duration = duration

    @property
    def renewal_option(self):
        """Gets the renewal_option of this Body42.  # noqa: E501

        \"Renewal Option: 0=Auto Disconnect, 1=Auto Renew, 2=Pay per hour\"  # noqa: E501

        :return: The renewal_option of this Body42.  # noqa: E501
        :rtype: int
        """
        return self._renewal_option

    @renewal_option.setter
    def renewal_option(self, renewal_option):
        """Sets the renewal_option of this Body42.

        \"Renewal Option: 0=Auto Disconnect, 1=Auto Renew, 2=Pay per hour\"  # noqa: E501

        :param renewal_option: The renewal_option of this Body42.  # noqa: E501
        :type: int
        """

        self._renewal_option = renewal_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body42):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
