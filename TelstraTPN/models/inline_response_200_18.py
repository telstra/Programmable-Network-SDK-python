# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.1
    Contact: pnapi-support@team.telstra.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20018(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_hostname': 'str',
        'customeruuid': 'str',
        'datacenteruuid': 'str',
        'flavoruuid': 'int',
        'floating_ip': 'str',
        'imageuuid': 'int',
        'instance_uuid': 'str',
        'status': 'str',
        'vnfuuid': 'str',
        'vportcount': 'int'
    }

    attribute_map = {
        'compute_hostname': 'compute_hostname',
        'customeruuid': 'customeruuid',
        'datacenteruuid': 'datacenteruuid',
        'flavoruuid': 'flavoruuid',
        'floating_ip': 'floating_ip',
        'imageuuid': 'imageuuid',
        'instance_uuid': 'instance_uuid',
        'status': 'status',
        'vnfuuid': 'vnfuuid',
        'vportcount': 'vportcount'
    }

    def __init__(self, compute_hostname=None, customeruuid=None, datacenteruuid=None, flavoruuid=None, floating_ip=None, imageuuid=None, instance_uuid=None, status=None, vnfuuid=None, vportcount=None):  # noqa: E501
        """InlineResponse20018 - a model defined in Swagger"""  # noqa: E501

        self._compute_hostname = None
        self._customeruuid = None
        self._datacenteruuid = None
        self._flavoruuid = None
        self._floating_ip = None
        self._imageuuid = None
        self._instance_uuid = None
        self._status = None
        self._vnfuuid = None
        self._vportcount = None
        self.discriminator = None

        if compute_hostname is not None:
            self.compute_hostname = compute_hostname
        if customeruuid is not None:
            self.customeruuid = customeruuid
        if datacenteruuid is not None:
            self.datacenteruuid = datacenteruuid
        if flavoruuid is not None:
            self.flavoruuid = flavoruuid
        if floating_ip is not None:
            self.floating_ip = floating_ip
        if imageuuid is not None:
            self.imageuuid = imageuuid
        if instance_uuid is not None:
            self.instance_uuid = instance_uuid
        if status is not None:
            self.status = status
        if vnfuuid is not None:
            self.vnfuuid = vnfuuid
        if vportcount is not None:
            self.vportcount = vportcount

    @property
    def compute_hostname(self):
        """Gets the compute_hostname of this InlineResponse20018.  # noqa: E501


        :return: The compute_hostname of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._compute_hostname

    @compute_hostname.setter
    def compute_hostname(self, compute_hostname):
        """Sets the compute_hostname of this InlineResponse20018.


        :param compute_hostname: The compute_hostname of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._compute_hostname = compute_hostname

    @property
    def customeruuid(self):
        """Gets the customeruuid of this InlineResponse20018.  # noqa: E501


        :return: The customeruuid of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._customeruuid

    @customeruuid.setter
    def customeruuid(self, customeruuid):
        """Sets the customeruuid of this InlineResponse20018.


        :param customeruuid: The customeruuid of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._customeruuid = customeruuid

    @property
    def datacenteruuid(self):
        """Gets the datacenteruuid of this InlineResponse20018.  # noqa: E501


        :return: The datacenteruuid of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._datacenteruuid

    @datacenteruuid.setter
    def datacenteruuid(self, datacenteruuid):
        """Sets the datacenteruuid of this InlineResponse20018.


        :param datacenteruuid: The datacenteruuid of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._datacenteruuid = datacenteruuid

    @property
    def flavoruuid(self):
        """Gets the flavoruuid of this InlineResponse20018.  # noqa: E501


        :return: The flavoruuid of this InlineResponse20018.  # noqa: E501
        :rtype: int
        """
        return self._flavoruuid

    @flavoruuid.setter
    def flavoruuid(self, flavoruuid):
        """Sets the flavoruuid of this InlineResponse20018.


        :param flavoruuid: The flavoruuid of this InlineResponse20018.  # noqa: E501
        :type: int
        """

        self._flavoruuid = flavoruuid

    @property
    def floating_ip(self):
        """Gets the floating_ip of this InlineResponse20018.  # noqa: E501


        :return: The floating_ip of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._floating_ip

    @floating_ip.setter
    def floating_ip(self, floating_ip):
        """Sets the floating_ip of this InlineResponse20018.


        :param floating_ip: The floating_ip of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._floating_ip = floating_ip

    @property
    def imageuuid(self):
        """Gets the imageuuid of this InlineResponse20018.  # noqa: E501


        :return: The imageuuid of this InlineResponse20018.  # noqa: E501
        :rtype: int
        """
        return self._imageuuid

    @imageuuid.setter
    def imageuuid(self, imageuuid):
        """Sets the imageuuid of this InlineResponse20018.


        :param imageuuid: The imageuuid of this InlineResponse20018.  # noqa: E501
        :type: int
        """

        self._imageuuid = imageuuid

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this InlineResponse20018.  # noqa: E501


        :return: The instance_uuid of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this InlineResponse20018.


        :param instance_uuid: The instance_uuid of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._instance_uuid = instance_uuid

    @property
    def status(self):
        """Gets the status of this InlineResponse20018.  # noqa: E501


        :return: The status of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20018.


        :param status: The status of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vnfuuid(self):
        """Gets the vnfuuid of this InlineResponse20018.  # noqa: E501


        :return: The vnfuuid of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._vnfuuid

    @vnfuuid.setter
    def vnfuuid(self, vnfuuid):
        """Sets the vnfuuid of this InlineResponse20018.


        :param vnfuuid: The vnfuuid of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._vnfuuid = vnfuuid

    @property
    def vportcount(self):
        """Gets the vportcount of this InlineResponse20018.  # noqa: E501


        :return: The vportcount of this InlineResponse20018.  # noqa: E501
        :rtype: int
        """
        return self._vportcount

    @vportcount.setter
    def vportcount(self, vportcount):
        """Sets the vportcount of this InlineResponse20018.


        :param vportcount: The vportcount of this InlineResponse20018.  # noqa: E501
        :type: int
        """

        self._vportcount = vportcount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
