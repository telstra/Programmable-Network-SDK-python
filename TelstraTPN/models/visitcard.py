# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Visitcard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'provided_services': 'list[str]',
        'name': 'str',
        'website': 'str',
        'contact_name': 'str',
        'contact_number': 'str',
        'email': 'str',
        'profile': 'str',
        'services_offered': 'str',
        'description': 'str',
        'image': 'str',
        'provider_category': 'str',
        'provider_type': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'provided_services': 'provided_services',
        'name': 'name',
        'website': 'website',
        'contact_name': 'contact_name',
        'contact_number': 'contact_number',
        'email': 'email',
        'profile': 'profile',
        'services_offered': 'services_offered',
        'description': 'description',
        'image': 'image',
        'provider_category': 'provider_category',
        'provider_type': 'provider_type'
    }

    def __init__(self, uuid=None, provided_services=None, name=None, website=None, contact_name=None, contact_number=None, email=None, profile=None, services_offered=None, description=None, image=None, provider_category=None, provider_type=None):  # noqa: E501
        """Visitcard - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._provided_services = None
        self._name = None
        self._website = None
        self._contact_name = None
        self._contact_number = None
        self._email = None
        self._profile = None
        self._services_offered = None
        self._description = None
        self._image = None
        self._provider_category = None
        self._provider_type = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if provided_services is not None:
            self.provided_services = provided_services
        if name is not None:
            self.name = name
        if website is not None:
            self.website = website
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_number is not None:
            self.contact_number = contact_number
        if email is not None:
            self.email = email
        if profile is not None:
            self.profile = profile
        if services_offered is not None:
            self.services_offered = services_offered
        if description is not None:
            self.description = description
        if image is not None:
            self.image = image
        if provider_category is not None:
            self.provider_category = provider_category
        if provider_type is not None:
            self.provider_type = provider_type

    @property
    def uuid(self):
        """Gets the uuid of this Visitcard.  # noqa: E501

        UUID of the Visit Card  # noqa: E501

        :return: The uuid of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Visitcard.

        UUID of the Visit Card  # noqa: E501

        :param uuid: The uuid of this Visitcard.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def provided_services(self):
        """Gets the provided_services of this Visitcard.  # noqa: E501


        :return: The provided_services of this Visitcard.  # noqa: E501
        :rtype: list[str]
        """
        return self._provided_services

    @provided_services.setter
    def provided_services(self, provided_services):
        """Sets the provided_services of this Visitcard.


        :param provided_services: The provided_services of this Visitcard.  # noqa: E501
        :type: list[str]
        """

        self._provided_services = provided_services

    @property
    def name(self):
        """Gets the name of this Visitcard.  # noqa: E501

        Short name by which to describe the provider  # noqa: E501

        :return: The name of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Visitcard.

        Short name by which to describe the provider  # noqa: E501

        :param name: The name of this Visitcard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def website(self):
        """Gets the website of this Visitcard.  # noqa: E501

        Web site to redirect user to if they click on the provider in the Global Exchange  # noqa: E501

        :return: The website of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Visitcard.

        Web site to redirect user to if they click on the provider in the Global Exchange  # noqa: E501

        :param website: The website of this Visitcard.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def contact_name(self):
        """Gets the contact_name of this Visitcard.  # noqa: E501


        :return: The contact_name of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this Visitcard.


        :param contact_name: The contact_name of this Visitcard.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_number(self):
        """Gets the contact_number of this Visitcard.  # noqa: E501


        :return: The contact_number of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this Visitcard.


        :param contact_number: The contact_number of this Visitcard.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def email(self):
        """Gets the email of this Visitcard.  # noqa: E501


        :return: The email of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Visitcard.


        :param email: The email of this Visitcard.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def profile(self):
        """Gets the profile of this Visitcard.  # noqa: E501


        :return: The profile of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Visitcard.


        :param profile: The profile of this Visitcard.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def services_offered(self):
        """Gets the services_offered of this Visitcard.  # noqa: E501

        Brief description of the services available from this provider  # noqa: E501

        :return: The services_offered of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._services_offered

    @services_offered.setter
    def services_offered(self, services_offered):
        """Sets the services_offered of this Visitcard.

        Brief description of the services available from this provider  # noqa: E501

        :param services_offered: The services_offered of this Visitcard.  # noqa: E501
        :type: str
        """

        self._services_offered = services_offered

    @property
    def description(self):
        """Gets the description of this Visitcard.  # noqa: E501

        Detailed description of the organisation  # noqa: E501

        :return: The description of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Visitcard.

        Detailed description of the organisation  # noqa: E501

        :param description: The description of this Visitcard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this Visitcard.  # noqa: E501

        URL for an image to be displayed on Global Exchange for this provider  # noqa: E501

        :return: The image of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Visitcard.

        URL for an image to be displayed on Global Exchange for this provider  # noqa: E501

        :param image: The image of this Visitcard.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def provider_category(self):
        """Gets the provider_category of this Visitcard.  # noqa: E501


        :return: The provider_category of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._provider_category

    @provider_category.setter
    def provider_category(self, provider_category):
        """Sets the provider_category of this Visitcard.


        :param provider_category: The provider_category of this Visitcard.  # noqa: E501
        :type: str
        """

        self._provider_category = provider_category

    @property
    def provider_type(self):
        """Gets the provider_type of this Visitcard.  # noqa: E501


        :return: The provider_type of this Visitcard.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Visitcard.


        :param provider_type: The provider_type of this Visitcard.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visitcard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
