# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from TelstraTPN.models.billing import Billing  # noqa: F401,E501
from TelstraTPN.models.role import Role  # noqa: F401,E501


class AuthvalidatetokengetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billings': 'list[Billing]',
        'company_name': 'str',
        'customer_account': 'str',
        'customerid': 'str',
        'internalid': 'int',
        'roles': 'list[Role]',
        'userid': 'str'
    }

    attribute_map = {
        'billings': 'billings',
        'company_name': 'company-name',
        'customer_account': 'customer-account',
        'customerid': 'customerid',
        'internalid': 'internalid',
        'roles': 'roles',
        'userid': 'userid'
    }

    def __init__(self, billings=None, company_name=None, customer_account=None, customerid=None, internalid=None, roles=None, userid=None):  # noqa: E501
        """AuthvalidatetokengetResponse - a model defined in Swagger"""  # noqa: E501

        self._billings = None
        self._company_name = None
        self._customer_account = None
        self._customerid = None
        self._internalid = None
        self._roles = None
        self._userid = None
        self.discriminator = None

        if billings is not None:
            self.billings = billings
        if company_name is not None:
            self.company_name = company_name
        if customer_account is not None:
            self.customer_account = customer_account
        if customerid is not None:
            self.customerid = customerid
        if internalid is not None:
            self.internalid = internalid
        if roles is not None:
            self.roles = roles
        if userid is not None:
            self.userid = userid

    @property
    def billings(self):
        """Gets the billings of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The billings of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: list[Billing]
        """
        return self._billings

    @billings.setter
    def billings(self, billings):
        """Sets the billings of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param billings: The billings of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: list[Billing]
        """

        self._billings = billings

    @property
    def company_name(self):
        """Gets the company_name of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The company_name of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param company_name: The company_name of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def customer_account(self):
        """Gets the customer_account of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The customer_account of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_account

    @customer_account.setter
    def customer_account(self, customer_account):
        """Sets the customer_account of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param customer_account: The customer_account of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: str
        """

        self._customer_account = customer_account

    @property
    def customerid(self):
        """Gets the customerid of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The customerid of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: str
        """
        return self._customerid

    @customerid.setter
    def customerid(self, customerid):
        """Sets the customerid of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param customerid: The customerid of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: str
        """

        self._customerid = customerid

    @property
    def internalid(self):
        """Gets the internalid of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The internalid of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: int
        """
        return self._internalid

    @internalid.setter
    def internalid(self, internalid):
        """Sets the internalid of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param internalid: The internalid of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: int
        """

        self._internalid = internalid

    @property
    def roles(self):
        """Gets the roles of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The roles of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param roles: The roles of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    @property
    def userid(self):
        """Gets the userid of this AuthvalidatetokengetResponse.  # noqa: E501

          # noqa: E501

        :return: The userid of this AuthvalidatetokengetResponse.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this AuthvalidatetokengetResponse.

          # noqa: E501

        :param userid: The userid of this AuthvalidatetokengetResponse.  # noqa: E501
        :type: str
        """

        self._userid = userid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthvalidatetokengetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
