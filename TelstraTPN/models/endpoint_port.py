# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.4.2
    Contact: pnapi-support@team.telstra.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EndpointPort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cabletype': 'str',
        'connectortype': 'str',
        'cfa': 'str',
        'endpointuuid': 'str',
        'interfacespeed': 'str',
        'interfacetype': 'str',
        'vport': 'list[Vport]'
    }

    attribute_map = {
        'cabletype': 'cabletype',
        'connectortype': 'connectortype',
        'cfa': 'cfa',
        'endpointuuid': 'endpointuuid',
        'interfacespeed': 'interfacespeed',
        'interfacetype': 'interfacetype',
        'vport': 'vport'
    }

    def __init__(self, cabletype=None, connectortype=None, cfa=None, endpointuuid=None, interfacespeed=None, interfacetype=None, vport=None):  # noqa: E501
        """EndpointPort - a model defined in OpenAPI"""  # noqa: E501

        self._cabletype = None
        self._connectortype = None
        self._cfa = None
        self._endpointuuid = None
        self._interfacespeed = None
        self._interfacetype = None
        self._vport = None
        self.discriminator = None

        if cabletype is not None:
            self.cabletype = cabletype
        if connectortype is not None:
            self.connectortype = connectortype
        if cfa is not None:
            self.cfa = cfa
        if endpointuuid is not None:
            self.endpointuuid = endpointuuid
        if interfacespeed is not None:
            self.interfacespeed = interfacespeed
        if interfacetype is not None:
            self.interfacetype = interfacetype
        if vport is not None:
            self.vport = vport

    @property
    def cabletype(self):
        """Gets the cabletype of this EndpointPort.  # noqa: E501

        Physical cable medium required to connect to this port  # noqa: E501

        :return: The cabletype of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._cabletype

    @cabletype.setter
    def cabletype(self, cabletype):
        """Sets the cabletype of this EndpointPort.

        Physical cable medium required to connect to this port  # noqa: E501

        :param cabletype: The cabletype of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._cabletype = cabletype

    @property
    def connectortype(self):
        """Gets the connectortype of this EndpointPort.  # noqa: E501

        Type of phyisical connector required to connect to this port  # noqa: E501

        :return: The connectortype of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._connectortype

    @connectortype.setter
    def connectortype(self, connectortype):
        """Sets the connectortype of this EndpointPort.

        Type of phyisical connector required to connect to this port  # noqa: E501

        :param connectortype: The connectortype of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._connectortype = connectortype

    @property
    def cfa(self):
        """Gets the cfa of this EndpointPort.  # noqa: E501

        Customer Facility Assignment, or the reference ID for the physical port within the DC for interconnect  # noqa: E501

        :return: The cfa of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._cfa

    @cfa.setter
    def cfa(self, cfa):
        """Sets the cfa of this EndpointPort.

        Customer Facility Assignment, or the reference ID for the physical port within the DC for interconnect  # noqa: E501

        :param cfa: The cfa of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._cfa = cfa

    @property
    def endpointuuid(self):
        """Gets the endpointuuid of this EndpointPort.  # noqa: E501

        Unique identifier for this endpoint  # noqa: E501

        :return: The endpointuuid of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._endpointuuid

    @endpointuuid.setter
    def endpointuuid(self, endpointuuid):
        """Sets the endpointuuid of this EndpointPort.

        Unique identifier for this endpoint  # noqa: E501

        :param endpointuuid: The endpointuuid of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._endpointuuid = endpointuuid

    @property
    def interfacespeed(self):
        """Gets the interfacespeed of this EndpointPort.  # noqa: E501

        Speed at which the physical interface operates  # noqa: E501

        :return: The interfacespeed of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._interfacespeed

    @interfacespeed.setter
    def interfacespeed(self, interfacespeed):
        """Sets the interfacespeed of this EndpointPort.

        Speed at which the physical interface operates  # noqa: E501

        :param interfacespeed: The interfacespeed of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._interfacespeed = interfacespeed

    @property
    def interfacetype(self):
        """Gets the interfacetype of this EndpointPort.  # noqa: E501

        Common name for the standard used on this port  # noqa: E501

        :return: The interfacetype of this EndpointPort.  # noqa: E501
        :rtype: str
        """
        return self._interfacetype

    @interfacetype.setter
    def interfacetype(self, interfacetype):
        """Sets the interfacetype of this EndpointPort.

        Common name for the standard used on this port  # noqa: E501

        :param interfacetype: The interfacetype of this EndpointPort.  # noqa: E501
        :type: str
        """

        self._interfacetype = interfacetype

    @property
    def vport(self):
        """Gets the vport of this EndpointPort.  # noqa: E501

        List of Virtual Ports (or VLANs) which exist on this endpoint  # noqa: E501

        :return: The vport of this EndpointPort.  # noqa: E501
        :rtype: list[Vport]
        """
        return self._vport

    @vport.setter
    def vport(self, vport):
        """Sets the vport of this EndpointPort.

        List of Virtual Ports (or VLANs) which exist on this endpoint  # noqa: E501

        :param vport: The vport of this EndpointPort.  # noqa: E501
        :type: list[Vport]
        """

        self._vport = vport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
