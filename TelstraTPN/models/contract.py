# coding: utf-8

"""
    Telstra Programmable Network API

    Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.  # noqa: E501

    OpenAPI spec version: 2.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Contract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'contract_end_time': 'int',
        'contract_start_time': 'int',
        'contract_status': 'int',
        'contractid': 'str',
        'currency_code': 'str',
        'currency_id': 'str',
        'deletedtimestamp': 'int',
        'duration': 'int',
        'price': 'int',
        'renewal_option': 'int',
        'version': 'int'
    }

    attribute_map = {
        'bandwidth': 'bandwidth',
        'contract_end_time': 'contract-end-time',
        'contract_start_time': 'contract-start-time',
        'contract_status': 'contractStatus',
        'contractid': 'contractid',
        'currency_code': 'currencyCode',
        'currency_id': 'currencyID',
        'deletedtimestamp': 'deletedtimestamp',
        'duration': 'duration',
        'price': 'price',
        'renewal_option': 'renewal-option',
        'version': 'version'
    }

    def __init__(self, bandwidth=None, contract_end_time=None, contract_start_time=None, contract_status=None, contractid=None, currency_code=None, currency_id=None, deletedtimestamp=None, duration=None, price=None, renewal_option=None, version=None):  # noqa: E501
        """Contract - a model defined in Swagger"""  # noqa: E501

        self._bandwidth = None
        self._contract_end_time = None
        self._contract_start_time = None
        self._contract_status = None
        self._contractid = None
        self._currency_code = None
        self._currency_id = None
        self._deletedtimestamp = None
        self._duration = None
        self._price = None
        self._renewal_option = None
        self._version = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if contract_end_time is not None:
            self.contract_end_time = contract_end_time
        if contract_start_time is not None:
            self.contract_start_time = contract_start_time
        if contract_status is not None:
            self.contract_status = contract_status
        if contractid is not None:
            self.contractid = contractid
        if currency_code is not None:
            self.currency_code = currency_code
        if currency_id is not None:
            self.currency_id = currency_id
        if deletedtimestamp is not None:
            self.deletedtimestamp = deletedtimestamp
        if duration is not None:
            self.duration = duration
        if price is not None:
            self.price = price
        if renewal_option is not None:
            self.renewal_option = renewal_option
        if version is not None:
            self.version = version

    @property
    def bandwidth(self):
        """Gets the bandwidth of this Contract.  # noqa: E501

        Bandwidth in kB/s  # noqa: E501

        :return: The bandwidth of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this Contract.

        Bandwidth in kB/s  # noqa: E501

        :param bandwidth: The bandwidth of this Contract.  # noqa: E501
        :type: int
        """
        if bandwidth is not None and bandwidth > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value less than or equal to `10000000`")  # noqa: E501
        if bandwidth is not None and bandwidth < 1000:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value greater than or equal to `1000`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def contract_end_time(self):
        """Gets the contract_end_time of this Contract.  # noqa: E501

          # noqa: E501

        :return: The contract_end_time of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._contract_end_time

    @contract_end_time.setter
    def contract_end_time(self, contract_end_time):
        """Sets the contract_end_time of this Contract.

          # noqa: E501

        :param contract_end_time: The contract_end_time of this Contract.  # noqa: E501
        :type: int
        """

        self._contract_end_time = contract_end_time

    @property
    def contract_start_time(self):
        """Gets the contract_start_time of this Contract.  # noqa: E501

          # noqa: E501

        :return: The contract_start_time of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._contract_start_time

    @contract_start_time.setter
    def contract_start_time(self, contract_start_time):
        """Sets the contract_start_time of this Contract.

          # noqa: E501

        :param contract_start_time: The contract_start_time of this Contract.  # noqa: E501
        :type: int
        """

        self._contract_start_time = contract_start_time

    @property
    def contract_status(self):
        """Gets the contract_status of this Contract.  # noqa: E501

          # noqa: E501

        :return: The contract_status of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._contract_status

    @contract_status.setter
    def contract_status(self, contract_status):
        """Sets the contract_status of this Contract.

          # noqa: E501

        :param contract_status: The contract_status of this Contract.  # noqa: E501
        :type: int
        """

        self._contract_status = contract_status

    @property
    def contractid(self):
        """Gets the contractid of this Contract.  # noqa: E501

        Identifier of a contract  # noqa: E501

        :return: The contractid of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._contractid

    @contractid.setter
    def contractid(self, contractid):
        """Sets the contractid of this Contract.

        Identifier of a contract  # noqa: E501

        :param contractid: The contractid of this Contract.  # noqa: E501
        :type: str
        """

        self._contractid = contractid

    @property
    def currency_code(self):
        """Gets the currency_code of this Contract.  # noqa: E501

          # noqa: E501

        :return: The currency_code of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Contract.

          # noqa: E501

        :param currency_code: The currency_code of this Contract.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def currency_id(self):
        """Gets the currency_id of this Contract.  # noqa: E501

          # noqa: E501

        :return: The currency_id of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this Contract.

          # noqa: E501

        :param currency_id: The currency_id of this Contract.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def deletedtimestamp(self):
        """Gets the deletedtimestamp of this Contract.  # noqa: E501

          # noqa: E501

        :return: The deletedtimestamp of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._deletedtimestamp

    @deletedtimestamp.setter
    def deletedtimestamp(self, deletedtimestamp):
        """Sets the deletedtimestamp of this Contract.

          # noqa: E501

        :param deletedtimestamp: The deletedtimestamp of this Contract.  # noqa: E501
        :type: int
        """

        self._deletedtimestamp = deletedtimestamp

    @property
    def duration(self):
        """Gets the duration of this Contract.  # noqa: E501

        Duration of contract in minutes  # noqa: E501

        :return: The duration of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Contract.

        Duration of contract in minutes  # noqa: E501

        :param duration: The duration of this Contract.  # noqa: E501
        :type: int
        """
        if duration is not None and duration < 3600:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `3600`")  # noqa: E501

        self._duration = duration

    @property
    def price(self):
        """Gets the price of this Contract.  # noqa: E501

          # noqa: E501

        :return: The price of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Contract.

          # noqa: E501

        :param price: The price of this Contract.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def renewal_option(self):
        """Gets the renewal_option of this Contract.  # noqa: E501

        \"Renewal Option: 0=Auto Disconnect, 1=Auto Renew, 2=Pay per hour\"  # noqa: E501

        :return: The renewal_option of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._renewal_option

    @renewal_option.setter
    def renewal_option(self, renewal_option):
        """Sets the renewal_option of this Contract.

        \"Renewal Option: 0=Auto Disconnect, 1=Auto Renew, 2=Pay per hour\"  # noqa: E501

        :param renewal_option: The renewal_option of this Contract.  # noqa: E501
        :type: int
        """

        self._renewal_option = renewal_option

    @property
    def version(self):
        """Gets the version of this Contract.  # noqa: E501

          # noqa: E501

        :return: The version of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Contract.

          # noqa: E501

        :param version: The version of this Contract.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
